// <auto-generated />
using System;
using Agencia_De_Turismo_App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agencia_De_Turismo_App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616195153_SecondCreate")]
    partial class SecondCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CidadeDestinoPacoteTuristico", b =>
                {
                    b.Property<int>("CidadesId")
                        .HasColumnType("int");

                    b.Property<int>("PacotesId")
                        .HasColumnType("int");

                    b.HasKey("CidadesId", "PacotesId");

                    b.HasIndex("PacotesId");

                    b.ToTable("CidadeDestinoPacoteTuristico");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.CidadeDestino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisDestinoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisDestinoId");

                    b.ToTable("CidadesDestino");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.PacoteTuristico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadeMaxima")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PacotesTuristicos");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.PaisDestino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaisesDestino");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.PontoTuristico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CidadeDestinoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeDestinoId");

                    b.ToTable("PontosTuristicos");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.Reservas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime2");

                    b.Property<int>("PacoteTuristicoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PacoteTuristicoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("CidadeDestinoPacoteTuristico", b =>
                {
                    b.HasOne("TurismoApp.Domain.models.CidadeDestino", null)
                        .WithMany()
                        .HasForeignKey("CidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurismoApp.Domain.models.PacoteTuristico", null)
                        .WithMany()
                        .HasForeignKey("PacotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurismoApp.Domain.models.CidadeDestino", b =>
                {
                    b.HasOne("TurismoApp.Domain.models.PaisDestino", null)
                        .WithMany("Cidades")
                        .HasForeignKey("PaisDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurismoApp.Domain.models.PontoTuristico", b =>
                {
                    b.HasOne("TurismoApp.Domain.models.CidadeDestino", null)
                        .WithMany("PontosTuristicos")
                        .HasForeignKey("CidadeDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurismoApp.Domain.models.Reservas", b =>
                {
                    b.HasOne("TurismoApp.Domain.models.Cliente", "Cliente")
                        .WithMany("Reserva")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurismoApp.Domain.models.PacoteTuristico", "PacoteTuristico")
                        .WithMany("Reservas")
                        .HasForeignKey("PacoteTuristicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("PacoteTuristico");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.CidadeDestino", b =>
                {
                    b.Navigation("PontosTuristicos");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.Cliente", b =>
                {
                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.PacoteTuristico", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("TurismoApp.Domain.models.PaisDestino", b =>
                {
                    b.Navigation("Cidades");
                });
#pragma warning restore 612, 618
        }
    }
}
